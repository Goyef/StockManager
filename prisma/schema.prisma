generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model commandes {
  id_commande    BigInt       @id @default(autoincrement())
  id_utilisateur BigInt
  date_commande  DateTime     @default(now()) @db.Timestamp(6)
  statut         statut       @default(en_attente)
  quantite       BigInt
  id_stock       BigInt
  stocks         stocks       @relation(fields: [id_stock], references: [id_stock], onDelete: SetNull)
  utilisateurs   utilisateurs @relation(fields: [id_utilisateur], references: [id_utilisateur], onDelete: SetNull)
  mouvements     mouvements[]
}

model mouvements {
  id_mouvement   BigInt         @id @default(autoincrement())
  id_stock       BigInt
  type_mouvement type_mouvement
  quantite       BigInt
  date_mouvement DateTime       @default(now()) @db.Timestamp(6)
  id_commande    BigInt
  commandes      commandes      @relation(fields: [id_commande], references: [id_commande], onDelete: SetNull)
  stocks         stocks         @relation(fields: [id_stock], references: [id_stock])
}

model roles {
  id_role      BigInt         @id @unique @default(autoincrement())
  nom_role     String         @db.VarChar
  utilisateurs utilisateurs[]
}

model stocks {
  id_stock            BigInt       @id @default(autoincrement())
  nom                 String       @db.VarChar
  description         String       @db.VarChar
  type                type
  quantite_disponible BigInt?      @default(0)
  commandes           commandes[]
  mouvements          mouvements[]
}

model utilisateurs {
  id_utilisateur BigInt      @id @default(autoincrement())
  nom            String      @db.VarChar
  prenom         String      @db.VarChar
  email          String      @unique @db.VarChar
  mot_de_passe   String      @db.VarChar
  id_role        BigInt      @default(2)
  commandes      commandes[]
  roles          roles       @relation(fields: [id_role], references: [id_role], onDelete: SetNull)
}

enum statut {
  en_attente
  validee
  invalidee
}

enum type {
  medicament
  materiel
}

enum type_mouvement {
  entree
  sortie
}
